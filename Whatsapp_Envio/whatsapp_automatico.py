import pandas as pd
import pywhatkit as pwk
import time
from datetime import datetime
import os

def criar_logs():
    """Cria os diret√≥rios de logs se n√£o existirem"""
    if not os.path.exists('logs'):
        os.makedirs('logs')

def salvar_log_envios(sucessos, erros, timestamp):
    """Salva log dos envios realizados"""
    try:
        # Log de sucessos
        if sucessos:
            df_sucessos = pd.DataFrame(sucessos)
            arquivo_sucesso = f'logs/envios_sucesso_{timestamp}.csv'
            df_sucessos.to_csv(arquivo_sucesso, index=False)
            print(f"‚úÖ Log de sucessos salvo: {arquivo_sucesso}")
        
        # Log de erros
        if erros:
            df_erros = pd.DataFrame(erros)
            arquivo_erro = f'logs/envios_erro_{timestamp}.csv'
            df_erros.to_csv(arquivo_erro, index=False)
            print(f"‚ùå Log de erros salvo: {arquivo_erro}")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao salvar logs: {str(e)}")

def criar_planilha_controle(numeros_enviados, timestamp):
    """Cria planilha para controle de confirma√ß√µes"""
    try:
        dados_controle = []
        for numero in numeros_enviados:
            dados_controle.append({
                'numero': numero,
                'enviado_em': timestamp,
                'confirmou': 'N√ÉO',
                'data_confirmacao': '',
                'observacoes': ''
            })
        
        df_controle = pd.DataFrame(dados_controle)
        arquivo_controle = f'logs/controle_confirmacoes_{timestamp}.csv'
        df_controle.to_csv(arquivo_controle, index=False)
        
        print(f"üìã Planilha de controle criada: {arquivo_controle}")
        print(f"üí° Use esta planilha para marcar quem confirmou recebimento!")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao criar planilha de controle: {str(e)}")

def enviar_mudanca_numero(arquivo_csv, coluna_numero, numero_antigo, numero_novo):
    """
    Envia notifica√ß√£o sobre mudan√ßa de n√∫mero via WhatsApp
    """
    
    # Timestamp para os arquivos de log
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    # Cria diret√≥rio de logs
    criar_logs()
    
    # Mensagem sobre mudan√ßa de n√∫mero
    mensagem = f"""üì± MUDAN√áA DE N√öMERO

Ol√°! Este √© meu novo n√∫mero do WhatsApp.

‚ùå N√∫mero antigo: {numero_antigo}
‚úÖ N√∫mero novo: {numero_novo}

Por favor, salve este novo n√∫mero em sua agenda e delete o antigo.

Confirme com um üëç para registrar.

Obrigado! üòä"""
    
    try:
        # Carrega o dataset (sem cabe√ßalho)
        print("üìÇ Carregando lista de n√∫meros...")
        
        try:
            # Tenta carregar COM cabe√ßalho primeiro
            df_com_header = pd.read_csv(arquivo_csv)
            if coluna_numero in df_com_header.columns:
                df = df_com_header
                numeros = df[coluna_numero].dropna().astype(str).tolist()
                print(f"‚úÖ Arquivo carregado com cabe√ßalho - usando coluna '{coluna_numero}'")
            else:
                raise ValueError("Coluna n√£o encontrada")
                
        except:
            # Se falhar, carrega SEM cabe√ßalho
            print("üìù Tentando carregar sem cabe√ßalho...")
            df = pd.read_csv(arquivo_csv, header=None)
            
            if df.shape[1] >= 2:
                # Assume: Coluna 0 = Nome, Coluna 1 = N√∫mero
                numeros = df.iloc[:, 1].dropna().astype(str).tolist()
                print(f"‚úÖ Arquivo sem cabe√ßalho carregado - usando coluna 1 (n√∫meros)")
            else:
                print(f"‚ùå Erro: Arquivo deve ter pelo menos 2 colunas (nome, n√∫mero)")
                return
        print(f"üìä Total de n√∫meros encontrados: {len(numeros)}")
        
        # Confirma√ß√£o antes de iniciar
        print(f"\nüìù Mensagem que ser√° enviada:")
        print("-" * 50)
        print(mensagem)
        print("-" * 50)
        
        confirma = input(f"\n‚ùì Confirma envio para {len(numeros)} n√∫meros? (s/n): ").lower()
        
        if confirma != 's':
            print("‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
            return
        
        print("\nüöÄ Iniciando envios...")
        print("‚ö†Ô∏è  N√ÉO MEXA NO COMPUTADOR DURANTE O PROCESSO!")
        
        # Aguarda 10 segundos para o usu√°rio se preparar
        for i in range(10, 0, -1):
            print(f"Iniciando em {i} segundos...", end='\r')
            time.sleep(1)
        
        # Listas para logs
        sucessos = []
        erros = []
        contador_sucesso = 0
        contador_erro = 0
        
        for i, numero in enumerate(numeros, 1):
            try:
                # Limpa o n√∫mero
                numero_limpo = ''.join(filter(str.isdigit, str(numero)))
                
                # Adiciona +55 se n√£o tiver
                if len(numero_limpo) == 11 and numero_limpo.startswith(('11', '12', '13', '14', '15', '16', '17', '18', '19', '21', '22', '24', '27', '28')):
                    numero_formatado = '+55' + numero_limpo
                elif len(numero_limpo) == 71:
                    numero_formatado = '+55' + numero_limpo
                else:
                    numero_formatado = '+55' + numero_limpo
                
                print(f"üì§ Enviando {i}/{len(numeros)} para {numero_formatado[-11:]}...")
                
                # Envia a mensagem
                pwk.sendwhatmsg_instantly(
                    phone_no=numero_formatado,
                    message=mensagem,
                    wait_time=8,     # Tempo para carregar WhatsApp Web
                    tab_close=True,  # Fecha a aba automaticamente
                    close_time=2     # Tempo para fechar
                )
                
                # Registra sucesso
                contador_sucesso += 1
                sucessos.append({
                    'numero_original': numero,
                    'numero_formatado': numero_formatado,
                    'status': 'ENVIADO',
                    'data_hora': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'tentativa': i
                })
                
                print(f"‚úÖ Enviado com sucesso!")
                
                # Pausa entre envios (importante para n√£o ser bloqueado)
                if i < len(numeros):  # N√£o pausa no √∫ltimo
                    print("‚è≥ Aguardando 15 segundos...")
                    time.sleep(15)
                
            except Exception as e:
                # Registra erro
                contador_erro += 1
                erros.append({
                    'numero_original': numero,
                    'numero_formatado': numero_formatado if 'numero_formatado' in locals() else 'Erro na formata√ß√£o',
                    'status': 'ERRO',
                    'erro': str(e),
                    'data_hora': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'tentativa': i
                })
                
                print(f"‚ùå Erro ao enviar para {numero}: {str(e)}")
                time.sleep(5)  # Pausa menor em caso de erro
                continue
        
        # Salva logs dos envios
        salvar_log_envios(sucessos, erros, timestamp)
        
        # Cria planilha de controle para acompanhar confirma√ß√µes
        numeros_enviados_sucesso = [item['numero_formatado'] for item in sucessos]
        if numeros_enviados_sucesso:
            criar_planilha_controle(numeros_enviados_sucesso, timestamp)
        
        # Relat√≥rio final
        print(f"\n{'='*50}")
        print(f"üìä RELAT√ìRIO FINAL")
        print(f"{'='*50}")
        print(f"‚úÖ Enviados com sucesso: {contador_sucesso}")
        print(f"‚ùå Erros: {contador_erro}")
        print(f"üì± Total processado: {len(numeros)}")
        print(f"üìÅ Logs salvos na pasta 'logs/'")
        print(f"‚ú® Processo conclu√≠do!")
        
        # Instru√ß√µes finais
        if contador_sucesso > 0:
            print(f"\nüí° PR√ìXIMOS PASSOS:")
            print(f"1. Verifique os logs na pasta 'logs/'")
            print(f"2. Use a planilha 'controle_confirmacoes_{timestamp}.csv'")
            print(f"3. Marque 'SIM' na coluna 'confirmou' quando receber o üëç")
            print(f"4. ‚ö†Ô∏è  IMPORTANTE: Confirma√ß√µes que chegarem depois n√£o aparecer√£o")
            print(f"   automaticamente no log - voc√™ deve atualizar manualmente!")
            print(f"5. A planilha √© sua ferramenta de controle manual! üìã")
        
    except Exception as e:
        print(f"‚ùå Erro geral: {str(e)}")

def criar_exemplo_csv():
    """Cria arquivo CSV de exemplo SEM cabe√ßalho"""
    dados = [
        ['Jo√£o Silva', '11999999999'],
        ['Maria Santos', '21888888888'], 
        ['Pedro Oliveira', '11777777777'],
        ['Ana Costa', '11666666666']
    ]
    
    df = pd.DataFrame(dados)
    df.to_csv('numeros_mudanca.csv', index=False, header=False)
    print("‚úÖ Arquivo 'numeros_mudanca.csv' criado SEM cabe√ßalho!")
    print("üìù Formato: Nome, N√∫mero (sem t√≠tulos nas colunas)")
    print("üìÇ Exemplo do conte√∫do:")
    print("   Jo√£o Silva,11999999999")
    print("   Maria Santos,21888888888")

def main():
    print("üì± NOTIFICA√á√ÉO DE MUDAN√áA DE N√öMERO")
    print("="*50)
    
    print("1. Enviar notifica√ß√µes")
    print("2. Criar arquivo CSV exemplo")
    
    opcao = input("\nEscolha uma op√ß√£o (1 ou 2): ").strip()
    
    if opcao == "1":
        # Configura√ß√µes
        arquivo = input("Nome do arquivo CSV (ex: numeros.csv): ").strip()
        if not arquivo:
            arquivo = "numeros.csv"
        
        print("\nüìù FORMATO DO ARQUIVO:")
        print("‚úÖ COM cabe√ßalho: nome,numero")
        print("‚úÖ SEM cabe√ßalho: Jo√£o Silva,11999999999")
        print("   O programa detecta automaticamente!")
        
        coluna = input("\nSe tem cabe√ßalho, nome da coluna dos n√∫meros (ex: numero): ").strip()
        if not coluna:
            coluna = "numero"
        
        num_antigo = input("Seu n√∫mero ANTIGO (ex: 11999999999): ").strip()
        num_novo = input("Seu n√∫mero NOVO (ex: 11888888888): ").strip()
        
        if not num_antigo or not num_novo:
            print("‚ùå N√∫meros antigo e novo s√£o obrigat√≥rios!")
            return
        
        print(f"\n‚ö†Ô∏è  INSTRU√á√ïES:")
        print(f"1. Feche o WhatsApp Web se estiver aberto")
        print(f"2. O programa abrir√° o navegador automaticamente")
        print(f"3. Escaneie o QR Code rapidamente quando aparecer")
        print(f"4. N√ÉO toque no computador durante o processo")
        
        input("\nPressione ENTER quando estiver pronto...")
        
        enviar_mudanca_numero(arquivo, coluna, num_antigo, num_novo)
        
    elif opcao == "2":
        criar_exemplo_csv()
    else:
        print("‚ùå Op√ß√£o inv√°lida!")

if __name__ == "__main__":
    main()
